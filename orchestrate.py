#! /usr/bin/python
import yaml
import sys
import os
import json
from pyroute2 import NetNS

def load_config_profile(path):
    with open(path,'r') as stream:
        try:
            return yaml.load(stream)
        except:
            print 'errors occur during parsing configuration file,please check it'
            return list()

def _count_key_value_of_obj(cfg,obj,key,value):
    cnt=0
    for item in cfg:
        _obj=item.keys()[0]
        _attr=item[_obj]
        if _obj != obj:
            continue
        if key in _attr and _attr[key] == value:
            cnt = cnt+1
    return cnt

def _validate_vswitch(cfg):
    for item in cfg:
        obj=item.keys()[0]
        if obj !='vswitch':
            continue
        attr=item[obj]
        if 'name' not in attr or 'type' not in attr:
            return False
        if _count_key_value_of_obj(cfg,'vswitch','name',attr['name']) != 1:
            return False 
    return True
def _validate_lan(cfg):
    for item in cfg:
        obj=item.keys()[0]
        if obj !='lan':
            continue
        attr=item[obj]
        if 'name' not in attr:
            return False
        if _count_key_value_of_obj(cfg,'lan','name',attr['name']) != 1:
            return False
    return True
def _validate_iface(cfg):
    for item in cfg:
        obj=item.keys()[0]
        if obj !='iface':
            continue
        attr=item[obj]
        if 'name' not in attr or 'attached_vswitch' not in attr or 'attached_lan' not in attr:
            return False
        if _count_key_value_of_obj(cfg,'iface','name',attr['name']) != 1:
            return False
        if _count_key_value_of_obj(cfg,'vswitch','name',attr['attached_vswitch']) != 1:
            return False
        if _count_key_value_of_obj(cfg,'lan','name',attr['attached_lan']) != 1:
            return False
    return True
    
def validate_config(cfg):
    return _validate_vswitch(cfg) and _validate_lan(cfg) and _validate_iface(cfg)
def degenerate(cfg,fp):
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'iface':
            continue
        fp.write('delete_link '+attr['name']+'\n')
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'vswitch':
            continue
        fp.write('delete_netns '+attr['name']+'\n') 
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'lan':
            continue
        fp.write('delete_lan '+attr['name']+'\n')
        if 'snat_prefix' in attr:
            fp.write('disable_snat_lan '+attr['name']+'\n')
    pass
def generate(cfg,fp):
    '''
    1st part:switches configuration
    '''
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'vswitch':
            continue
        vs_name=attr['name']
        fp.write('\n#configure vswitch:'+vs_name+'\n')
        fp.write('create_netns '+vs_name+'\n')
    '''
    2nd part: lan configuration
    '''
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'lan':
            continue
        lan_name=attr['name']
        fp.write('\n#configure lan:'+lan_name+'\n')
        fp.write('create_lan '+lan_name+'\n')
        if 'ip_addrs' in attr:
            for ipaddr in attr['ip_addrs']:
                fp.write('bind_ipaddr_to_lan '+lan_name+' '+ipaddr+'\n')
        if 'snat_prefix' in attr:
            subnet=attr['snat_prefix']
            fp.write('enable_snat_lan '+lan_name+' '+subnet+'\n')
    '''
    3rd part:interface configuration
    '''
    for item in cfg:
        obj=item.keys()[0]
        attr=item[obj]
        if obj != 'iface':
            continue
        link_name=attr['name']
        attached_vs=attr['attached_vswitch']
        attached_lan=attr['attached_lan']
        fp.write('\n#configure interface:'+link_name+'\n')
        fp.write('create_link '+link_name+' '+attached_lan+' '+attached_vs+'\n')
        if 'ip_addrs' in attr:
            for ipaddr in attr['ip_addrs']:
                fp.write('bind_ipaddr_to_link '+link_name+' '+attached_vs+' '+ipaddr+'\n')
        if 'gateway' in attr:
            gw=attr['gateway']
            fp.write('set_gateway '+link_name+' '+attached_vs+' '+gw+'\n')
    pass
if __name__ == '__main__':
    cfg=load_config_profile('./sample.yaml')
    if validate_config(cfg) != True:
        print 'invalid configuration file'
        sys.exit(1)

    if len(sys.argv) != 2:
        sys.exit(1)
    if sys.argv[1] =='generate' :
        f_generate=open('./generate.sh','w')
        f_generate.write('#! /bin/bash\n')
        f_generate.write('#generated by orchestrate.py\n')
        f_generate.write('source ./util\n')
        generate(cfg,f_generate)
    elif sys.argv[1] =='degenerate' :
        f_degenerate=open('./degenerate.sh','w')
        f_degenerate.write('#! /bin/bash\n')
        f_degenerate.write('#generated by orchestrate.py\n')
        f_degenerate.write('source ./util\n')
        degenerate(cfg,f_degenerate)
    else :
        sys.exit(1)
    #f_generate=open('./generate.sh','w')
    #f_degenerate=open('./degenerate.sh','w')
    #f_generate.write('#! /bin/bash\n')
    #f_generate.write('#generated by orchestrate.py\n')
    #f_generate.write('source ./util.sh\n')
    #print _validate_vswitch(cfg)
    #print _validate_lan(cfg)
    #print _validate_iface(cfg)
     #print _count_key_value_of_obj(cfg,'vswitch','name','vswitch2')
    '''
    print validate_config(cfg)
    for item in cfg:
        obj=item.keys()[0]
        if obj != 'vswitch':
            continue
        create_vswitch(item)
    '''
